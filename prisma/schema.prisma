datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id    String  @id @db.Uuid
  email String  @unique
  name  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  password       Password?
  roles          Role[]
  sessions       Session[]
  subscriptions  Subscription[]
  itemStatuses   ItemStatus[]
  categories     Category[]
  mastodonTokens MastodonOauthToken[]
  BlueskyAccount BlueskyAccount[]
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique @db.Uuid
}

model Session {
  id             String   @id @db.Uuid
  expirationDate DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @db.Uuid

  // non-unique foreign key
  @@index([userId])
}

model MastodonOauthToken {
  id           String   @id @db.Uuid
  instance     String
  accessToken  String
  tokenType    String
  expiresIn    Int?
  refreshToken String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  userId       String   @db.Uuid
  user         User     @relation(fields: [userId], references: [id])
}

model BlueskyAccount {
  id              String   @id @db.Uuid
  service         String
  refreshJwt      String
  accessJwt       String
  handle          String   @unique
  did             String   @unique
  email           String?
  emailConfirmed  Boolean?
  emailAuthFactor Boolean?
  active          Boolean
  status          String?
  userId          String   @db.Uuid
  user            User     @relation(fields: [userId], references: [id])
}

model Permission {
  id          String @id @db.Uuid
  action      String // e.g. create, read, update, delete
  entity      String // e.g. note, user, etc.
  access      String // e.g. own or any
  description String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roles Role[]

  @@unique([action, entity, access])
}

model Role {
  id          String @id @db.Uuid
  name        String @unique
  description String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users       User[]
  permissions Permission[]
}

model Verification {
  id        String   @id @db.Uuid
  createdAt DateTime @default(now())

  /// The type of verification, e.g. "email" or "phone"
  type String

  /// The thing we're trying to verify, e.g. a user's email or phone number
  target String

  /// The secret key used to generate the otp
  secret String

  /// The algorithm used to generate the otp
  algorithm String

  /// The number of digits in the otp
  digits Int

  /// The number of seconds the otp is valid for
  period Int

  /// The valid characters for the otp
  charSet String

  /// When it's safe to delete this verification
  expiresAt DateTime?

  @@unique([target, type])
}

model Media {
  id              String   @id @db.Uuid
  type            String
  url             String   @unique
  width           Int
  height          Int
  description     String?
  thumbnailType   String
  thumbnailUrl    String
  thumbnailWidth  Int
  thumbnailHeight Int
  createdAt       DateTime @default(now())
  itemId          String?  @db.Uuid
  item            Item?    @relation(fields: [itemId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Feed {
  id            String         @id @db.Uuid
  title         String
  description   String?
  url           String
  feedUrl       String         @unique
  lastFetched   DateTime?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  items         Item[]
  subscriptions Subscription[]
}

model Item {
  id          String       @id @db.Uuid
  title       String
  description String?
  content     String?
  url         String
  publishedAt DateTime
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  feed        Feed         @relation(fields: [feedId], references: [id])
  feedId      String       @db.Uuid
  statuses    ItemStatus[]
  media       Media[]

  @@unique([url, feedId])
}

model Subscription {
  id         String    @id @db.Uuid
  user       User      @relation(fields: [userId], references: [id])
  userId     String    @db.Uuid
  feed       Feed      @relation(fields: [feedId], references: [id])
  feedId     String    @db.Uuid
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?   @db.Uuid

  @@unique([userId, feedId])
}

model ItemStatus {
  id        String   @id @db.Uuid
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.Uuid
  item      Item     @relation(fields: [itemId], references: [id])
  itemId    String   @db.Uuid
  read      Boolean  @default(false)
  starred   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, itemId])
}

model Category {
  id            String         @id @db.Uuid
  name          String
  user          User           @relation(fields: [userId], references: [id])
  userId        String         @db.Uuid
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  subscriptions Subscription[]

  @@unique([name, userId])
}

enum Visibility {
  public
  unlisted
  private
  direct
}

enum PostType {
  Article
  Note
}

enum ActorType {
  Application
  Group
  Organization
  Person
  Service
}
